import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.InetAddress;
import java.nio.ByteBuffer;
import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.Scanner;

public class Server {
    public static void main(String[] args) throws IOException {
        //获取服务端的IP地址
        System.out.println("你的IP地址为 " + InetAddress.getLocalHost().getHostAddress());

        //自定义端口号，默认为1234
        int port = 1234;
        Scanner reader = new Scanner(System.in);
        System.out.print("端口(默认1234)：");
        String tempPortString = reader.nextLine();

        int tempPort = 0;
        if (tempPortString.length() != 0) {
            tempPort = Integer.valueOf(tempPortString);
        }
        if (tempPort <= 65535 && tempPort >= 1024) port = tempPort;

        //创建ServerSocketChannel并绑定端口。
        ServerSocketChannel server = ServerSocketChannel.open();
        server.socket().bind(new InetSocketAddress(port));
        server.configureBlocking(false);//设置为非阻塞模式

        while (true) {
            try {
                SocketChannel socket = server.accept();
                //ServerSocketChannel非阻塞模式下accept会立即返回，如果此时没有链接将返回null
                if(socket==null)    continue;
                socket.configureBlocking(false);//设置为非阻塞模式

                if (socket.finishConnect())
                    System.err.println(socket.getRemoteAddress() + " 已经连接！(输入exit结束聊天)");

                //获取IP地址
                String temp = socket.getRemoteAddress().toString();
                String IP = temp.substring(temp.indexOf('/') + 1, temp.indexOf(':'));

                //开启读线程和写线程
                new ServerReadHandlerThread(socket, IP);
                new ServerWriteHandlerThread(socket, IP);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}

class ServerReadHandlerThread extends Thread {
    private SocketChannel server;
    private String header;
    private ByteBuffer buffer = ByteBuffer.allocateDirect(100);


    public ServerReadHandlerThread(SocketChannel server, String IP) {
        this.server = server;
        header = IP;
        start();
    }

    public void run() {
        try {
            while (true) {
                buffer.clear();
                //非阻塞模式下可能读取字节数为0,需要使用轮训的方式
                while (server.read(buffer) <= 0) ;

                buffer.flip();
                printMeg(buffer);
            }
        } catch (IOException e) {
            System.out.println(header + " 连接断开！");
        } finally {
            if (server.isConnected()) {
                try {
                    server.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    private void printMeg(ByteBuffer buffer) {
        System.out.print("\n--------------------\n" + header + ":");
        while (buffer.hasRemaining())
            System.out.print(buffer.getChar());
        System.out.println("\n--------------------");
    }
}

class ServerWriteHandlerThread extends Thread {
    private SocketChannel server;
    private String header;
    private ByteBuffer buffer = ByteBuffer.allocateDirect(100);
    private BufferedReader in = new BufferedReader(new InputStreamReader(System.in));

    public ServerWriteHandlerThread(SocketChannel server, String IP) {
        this.server = server;
        header = IP;
        start();
    }

    public void run() {
        try {
            while (true) {
                System.out.print("请输入：");
                String meg = in.readLine();
                if (!server.isConnected()) break;
                if (meg.equals("exit")) break;

                buffer.clear();
                for (int i = 0; i < meg.length(); i++)
                    buffer.putChar(meg.charAt(i));
                buffer.flip();
                while (buffer.hasRemaining())
                    server.write(buffer);
            }
        } catch (IOException e) {
            System.out.println(header + " 连接断开！");
        } finally {
            try {
                if (server.isConnected())
                    server.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}
